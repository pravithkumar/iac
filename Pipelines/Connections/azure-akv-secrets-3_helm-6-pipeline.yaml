parameters:
  - name: azureSubscription
    type: string
    default: 'SC_Business Innovation Platform - 1000106902'
  - name: spn
    type: string
    default: 'cf877cb2-d407-49fc-a0c9-c98777cef68b'
  - name: spnPassword
    type: string
    default: 'Ven8Q~1iY4au6X21sSPlGynbxtfUGanZsftyXcYu'
  - name: tenant
    type: string
    default: '188285f7-8f1e-4c0d-a0bc-797e3e38c5b3'
  - name: targetFolder
    type: string
    default: '$(System.DefaultWorkingDirectory)/DemoApp'
  - name: contents
    type: string
    default: 'secrets.csv'

  - name: deploymentPath
    displayName: Deployment Path
    type: string
    default: './my-app-4/deployment.yaml'
    values:
    - './my-app-4/deployment.yaml'
    - './my-app-4/deployment-1.yaml'  

trigger: none

pool:
  vmImage: 'windows-latest'

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'SC_Business Innovation Platform - 1000106902'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az login --service-principal -u "${{ parameters.spn }}" -p "${{ parameters.spnPassword }}" --tenant "${{ parameters.tenant }}"
      Write-Host "Connected to Azure"

- task: CopyFiles@2
  inputs:
    Contents: $(contents)
    targetFolder: $(targetFolder)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $secrets = Import-Csv -Path "${{ parameters.targetFolder }}/${{ parameters.contents }}"
      foreach ($secret in $secrets) {
        if (![string]::IsNullOrEmpty($secret.name) -and ![string]::IsNullOrEmpty($secret.value)) {
          Write-Host "Setting secret $($secret.name) in Azure Key Vault"
          try {
            az login --service-principal -u "${{ parameters.spn }}" -p "${{ parameters.spnPassword }}" --tenant "${{ parameters.tenant }}"
            az keyvault secret set --vault-name "akv-pega-poc1" --name "$($secret.name)" --value "$($secret.value)"
          } catch {
            Write-Host "Failed to set secret $($secret.name)"
          }
        }
      }


# - task: HelmInstaller@1
#   inputs:
#     helmVersionToInstall: 'latest'

# - checkout: self
#   persistCredentials: true

# - task: Kubernetes@1
#   displayName: 'kubectl login'
#   inputs:
#     connectionType: 'SC_CCS_400847_Priya_MSDN'
#     kubernetesServiceEndpoint: 'akspegapoc2'
#     command: 'login'

# - script: |       
#     kubectl apply -f ${{ parameters.deploymentPath }}
#   displayName: 'helm deploy'