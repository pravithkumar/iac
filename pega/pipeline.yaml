trigger: none 

 

variables:

# #setting for DR failover 

#   runJob1: false              #csv

#   runJob2: false              #akv

#   runJob3: false              #certs

#   runJob4: false              #Create certificates with secret names in AKS

#   runJob5: false              #TLS/certsJob

#   runJob6: true              #install web pod

#   runJob7: true              #install pega app

  

#Setting for Prod failback

  # runJob1: false              #csv

  # runJob2: false              #akv

  # runJob3: fasle              #certs

  # runJob4: false              #Create certificates with secret names in AKS

  # runJob5: false              #TLS/certsJob

  # runJob6: false              #install web pod

  # runJob7: false              #install pega app

 

# Enable all jobs

  # runJob1: true              #csv

  # runJob2: true              #akvjob

  # runJob3: true              #certs

  # runJob4: true              #Create certificates with secret names in AKS

  # runJob5: true              #TLS/certsJob

  # runJob6: true              #install web pod

  # runJob7: true             #install pega app

 

#Setting tp disable all jobs

  runJob1: false              #csv

  runJob2: false              #akv

  runJob3: false             #certs

  runJob4: false              #Create certificates with secret names in AKS

  runJob5: false              #TLS/certsJob

  runJob6: false              #install web pod

  runJob7: true            #install pega app

 

  runJob8: false              #upgrade pega app

  runJob9: false              #rollout restart deployment

  proddrJobs: false           #Enable this for prod to dr and dr to prod jobs.

  checkPodsStatus: false       #check the pods status in the namespace

  checkDatabaseCounts: false  # check the dbcounts before and after fail over

 

parameters:

- name: envName

  type: string

  default: 'dev2'

  values:  

  - 'dev1'

  - 'dev2'

  - 'qa1'

  - 'uat1'

  - 'stage'

  - 'trng1'

  - 'prod'

  - 'prod-dr'

  - 'dr-prod'

- name: envDetail

  type: object

  default:

    dev1:

      azureSubscription: 'asc-spn-pega-nprd'

      keyvault: 'sc-kv-pegaang-nprd-01'     

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-dev1.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dev1.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dev1-2.yaml'

      namespace: 'ns-ang-pega-dev1'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-NPRD'

      kubernetesCluster: 'DC10AKSPEGANPRD01'

      env_name: 'dev'

      deployment_env_name: 'dev'

      deployment_env_name_prefix: 'angpega-dev1'

      certpath: './base-templete/ang-pega-certs/dev'

      tlscertsecret: 'angpega-aks-dev1-secret' 

      tlscertpath: './base-templete/ang-pega-certs/dev/tls/angpegadev.cer'

      tlskeypath: './base-templete/ang-pega-certs/dev/tls/angpegadev-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-dev1' 

      appname: 'ang-pega-dev1'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-dev1.yaml'

      runJob10: false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11:  false              #Create nodepool on AKS cluster

      runJob12:  false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

    dev2:

      azureSubscription: 'asc-spn-pega-nprd'

      keyvault: 'sc-kv-pegaang-nprd-01'           

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-dev2.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dev2.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dev2-2.yaml'

      namespace: 'ns-ang-pega-dev2'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-NPRD'

      kubernetesCluster: 'DC10AKSPEGANPRD01'

      env_name: 'dev'

      deployment_env_name: 'dev2'

      deployment_env_name_prefix: 'angpega-dev2'

      certpath: './base-templete/ang-pega-certs/dev'      

      tlscertsecret: 'angpega-aks-dev2-secret'

      tlscertpath: './base-templete/ang-pega-certs/dev/tls/angpegadev.cer'

      tlskeypath: './base-templete/ang-pega-certs/dev/tls/angpegadev-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-dev2' 

      appname: 'ang-pega-dev2'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-dev2.yaml'

      runJob10:  false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11:  false              #Create nodepool on AKS cluster

      runJob12:  false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

    qa1:

      azureSubscription: 'asc-spn-pega-nprd'

      keyvault: 'sc-kv-pegaang-nprd-01'     

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-qa1.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-qa1.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-qa1-2.yaml'

      namespace: 'ns-ang-pega-qa1'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-NPRD'

      kubernetesCluster: 'DC10AKSPEGANPRD01'

      env_name: 'qa'

      deployment_env_name: 'qa'

      deployment_env_name_prefix: 'angpega-qa1'

      certpath: './base-templete/ang-pega-certs/qa'

      tlscertsecret: 'angpega-aks-qa1-secret'

      tlscertpath: './base-templete/ang-pega-certs/qa/tls/angpegaqa.cer'

      tlskeypath: './base-templete/ang-pega-certs/qa/tls/angpegaqa-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-qa1'

      appname: 'ang-pega-qa1'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-qa1.yaml'

      runJob10:  false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11:  false              #Create nodepool on AKS cluster

      runJob12:  false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

 

    uat1:

      azureSubscription: 'asc-spn-pega-nprd'

      keyvault: 'sc-kv-pegaang-nprd-01'      

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-uat1.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-uat1.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-uat1-2.yaml'

      namespace: 'ns-ang-pega-uat1'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-NPRD'

      kubernetesCluster: 'DC10AKSPEGANPRD01'

      env_name: 'uat'

      deployment_env_name: 'uat'

      deployment_env_name_prefix: 'angpega-uat1'

      certpath: './base-templete/ang-pega-certs/uat'

      tlscertsecret: 'angpega-aks-uat-secret'

      tlscertpath: './base-templete/ang-pega-certs/uat/tls/angpegauat.cer'

      tlskeypath: './base-templete/ang-pega-certs/uat/tls/angpegauat-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-uat1'

      appname: 'ang-pega-uat1'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-uat1.yaml'

      runJob10:  false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11:  false              #Create nodepool on AKS cluster

      runJob12:  false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

 

    stage:

      azureSubscription: 'asc-spn-pega-stg'

      keyvault: 'sc-kv-pegaang-stg-01'     

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-stg1.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-stage.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-stage-2.yaml'

      namespace: 'ns-ang-pega-stage'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-STG'

      kubernetesCluster: 'DC10AKSPEGASTG01'

      env_name: 'stg'

      deployment_env_name: 'stage'

      deployment_env_name_prefix: 'ang-pega-stage'

      certpath: './base-templete/ang-pega-certs/stg'

      tlscertsecret: 'angpega-aks-stage-secret'

      tlscertpath: './base-templete/ang-pega-certs/stg/tls/angpegastg.cer'

      tlskeypath: './base-templete/ang-pega-certs/stg/tls/angpegastg-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-stg'

      appname: 'ang-pega-stage'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-stage.yaml'

      upgradeValueFile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-upgrade-taints-stage.yaml' 

      runJob10:  false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11:  false              #Create nodepool on AKS cluster

      runJob12:  false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

 

    trng1:

      azureSubscription: 'asc-spn-pega-trng'

      keyvault: 'sc-kv-pegaang-trng-01'      

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-trng1.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-trng1.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-trng1-2.yaml'

      namespace: 'ns-ang-pega-training1'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-TRNG'

      kubernetesCluster: 'DC10AKSPEGATRNG01'

      env_name: 'trng1'

      deployment_env_name: 'trng1'

      deployment_env_name_prefix: 'ns-ang-pega-trng1'

      certpath: './base-templete/ang-pega-certs/trng'

      tlscertsecret: 'angpega-aks-trng1-secret'

      tlscertpath: './base-templete/ang-pega-certs/trng/tls/angpegatrng.cer'

      tlskeypath: './base-templete/ang-pega-certs/trng/tls/angpegatrng-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-trng1'

      appname: 'ang-pega-trng1'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-trng1.yaml'

      upgradeValueFile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-upgrade-taints-trng1.yaml' 

      runJob10:  false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11:  false              #Create nodepool on AKS cluster

      runJob12:  false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

 

    prod:

      azureSubscription: 'asc-spn-pega-prd'

      azureSQLSubscription: 'asp-spn-sqlmi-angpega-dr'

      keyvault: 'sc-kv-pegaang-prod-01'      

      keyvaultResourceGroup: 'BusApp-PegaANG-Prod'      

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-prd.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-prd.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-prd-2.yaml'

      namespace: 'ns-ang-pega-prod'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-PROD'

      kubernetesCluster: 'DC10AKSPEGAPROD01'

      env_name: 'prd'

      deployment_env_name: 'prd'

      deployment_env_name_prefix: 'ang-pega-prod'

      #env_name: 'stg'

      certpath: './base-templete/ang-pega-certs/prd'

      #certpath: './base-templete/ang-pega-certs/stg'

      tlscertsecret: 'angpega-aks-prd-secret'

      tlscertpath: './base-templete/ang-pega-certs/prd/tls/angpegaprd.cer'

      tlskeypath: './base-templete/ang-pega-certs/prd/tls/angpegaprd-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-prd'

      appname: 'ang-pega-prd'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-prd.yaml'

      upgradeValueFile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-upgrade-taints-prd.yaml'  

      runJob10: false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: false              # Helm uninstall pods

      runJob103: false

      runJob11: false              #Create nodepool on AKS cluster

      runJob12: false               #ANG:failover SC-NC

      runJob120: false               #ANG:failover SC-NC

      runJob13: false              #ANG:failback NC-SC

      runJob14: false              #scaleup prod pods

      runJob15: false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job5

 

    prod-dr:

      azureSubscription: 'asc-spn-pega-dr'

      azureResourceGroup: 'BusApp-AKSPega-DR'

      prodazureSubscription: 'asc-spn-pega-prd'

      prodazureResourceGroup: 'BusApp-AKSPega-PROD'

      prodKubernetesCluster: 'DC10AKSPEGAPROD01'

      kubernetesCluster: 'DC20AKSPEGAPROD01'

      drazureResourceGroup: 'BusApp-AKSPega-DR'

      drkubernetesCluster: 'DC20AKSPEGAPROD01'

      drazureSubscription: 'asc-spn-pega-dr'

      drnpazureSubscription: 'asc-spn-np-dr'

      azureSQLSubscription: 'asp-spn-sqlmi-angpega-dr'

      azureNodePoolSubscription: 'asc-spn-np-dr'

      keyvault: 'nc-kv-pegaang-dr-01' 

      prodkeyvault: 'sc-kv-pegaang-prod-01'     

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-dr.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dr.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dr-2.yaml'

      prodNamespace: 'ns-ang-pega-prod'

      namespace: 'ns-ang-pega-dr'

      angNamespace: 'ns-ang-pega-dr'

      poolName: 'DC10AKSJMPBX110'

      prod_env_name: 'prod'

      env_name: 'dr'

      deployment_env_name: 'dr'

      deployment_env_name_prefix: 'ang-pega-dr'

      certpath: './base-templete/ang-pega-certs/dr'

      tlscertsecret: 'angpega-aks-dr-secret'

      tlscertpath: './base-templete/ang-pega-certs/dr/tls/angpegadr.cer'

      tlskeypath: './base-templete/ang-pega-certs/dr/tls/angpegadr-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-dr'

      appname: 'ang-pega-dr'

      prodAppname: 'ang-pega-prd'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-dr.yaml'

      upgradeValueFile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-upgrade-taints-dr.yaml'

      osSku: 'Ubuntu'

      nodeName: 'rwlnx1sv5'

      nodeName1: 'rnwlnx1sv5'

      minCount : '1'

      maxCount: '25'

      vmSize: 'Standard_E16s_v5'

      nodeCount: '1'

      applicationLabel: 'pega_dr_v5'

      environmentLabel: 'dr'

      categoryLabel: 'drlnx1sv5'

      appTaint: 'pega-web-dr_v5'

      appTaint1: 'pega-nonweb-dr_v5'

      maxPods: '25'

      #nodeCount: '1'

      environmentTag: 'DR'

      parentServicTag: 'PAAS'

      workloadCategoryTag: 'AKS'

      workloadSubCategoryTag: 'Node Pool'

      applicationNameTag: 'Pega'

      projectIdTag: '11056600'

      projectNameTag: 'Pega AKS'

      runJob10:  false               #scaledown prod pods

      runJob101: false              #scaledown dr pods

      runJob102: true              # Helm uninstall prod

      runJob103: false              # Helm uninstall dr

      runJob11:  true               #Create nodepool on AKS cluster

      runJob12:  true               #ANG:failover SC-NC

      runJob120: true               #truncate tables

      runJob13:  false              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  false              #delete node pool

      dependsOn: Job7

      dependsOn1: Job12

 

      # runJob10: false               #scaledown prod pods

      # runJob101: false              #scaledown dr pods

      # runJob11: false               #Create nodepool on AKS cluster

      # runJob12: false               #ANG:failover SC-NC

      # runJob13: false              #ANG:failback NC-SC

      # runJob14: false              #scaleup prod pods

      # runJob15: false              #delete node pool

 

    dr-prod:

      prodAzureSubscription: 'asc-spn-pega-prd'

      prodAzureResourceGroup: 'BusApp-AKSPega-PROD'

      prodKubernetesCluster: 'DC10AKSPEGAPROD01'

      azureSubscription: 'asc-spn-pega-dr'

      drazureResourceGroup: 'BusApp-AKSPega-DR'

      drkubernetesCluster: 'DC20AKSPEGAPROD01'

      drazureSubscription: 'asc-spn-pega-dr'

      drnpazureSubscription: 'asc-spn-np-dr'

      azureSQLSubscription: 'asp-spn-sqlmi-angpega-dr'

      azureNodePoolSubscription: 'asc-spn-np-dr'

      keyvault: 'nc-kv-pegaang-dr-01'      

      targetFolder: '$(System.DefaultWorkingDirectory)/base-templete/ang-pega-akv'

      csvcontents: 'ang-pega-connection-secrets-dr.csv'

      deploymentPath: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dr.yaml'

      deploymentPath1: './base-templete/ang-pega-akv-aks/ang-pega-akv-aks-secret-dr-2.yaml'

      prodNamespace: 'ns-ang-pega-prod'

      namespace: 'ns-ang-pega-dr'

      angNamespace: 'ns-ang-pega-dr'

      poolName: 'DC10AKSJMPBX110'

      azureResourceGroup: 'BusApp-AKSPega-DR'

      kubernetesCluster: 'DC20AKSPEGAPROD01'

      prod_env_name: 'prod'

      prodkeyvault: 'sc-kv-pegaang-prod-01'

      env_name: 'dr'

      deployment_env_name: 'prod'

      deployment_env_name_prefix: 'ang-pega-prod'

      #env_name: 'stg'

      certpath: './base-templete/ang-pega-certs/dr'

      #certpath: './base-templete/ang-pega-certs/stg'

      tlscertsecret: 'angpega-aks-dr-secret'

      tlscertpath: './base-templete/ang-pega-certs/dr/tls/angpegadr.cer'

      tlskeypath: './base-templete/ang-pega-certs/dr/tls/angpega-private.key'

      webpath: './base-templete/ang-pega-deploy/env-web-template-dr'

      appname: 'ang-pega-dr'

      prodAppname: 'ang-pega-prd'

      helmpath: './base-templete/pega-helm-charts/pega-helm-charts-2.13.1/charts/pega'

      valuefile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-taints-dr.yaml'

      upgradeValueFile: './base-templete/ang-pega-deploy/env-templetes/ang-pega-upgrade-taints-dr.yaml'

      osSku: 'Ubuntu'

      nodeName: 'rwlnx1sv5'

      nodeName1: 'rnwlnx1sv5'

      minCount : '1'

      maxCount: '25'

      vmSize: 'Standard_E16s_v5'

      nodeCount: '1'

      applicationLabel: 'pega_dr_v5'

      environmentLabel: 'dr'

      categoryLabel: 'drlnx1sv5'

      appTaint: 'pega-web-dr_v5'

      appTaint1: 'pega-nonweb-dr_v5'

      maxPods: '25'

      #nodeCount: '1'

      environmentTag: 'DR'

      parentServiceTag: 'PAAS'

      workloadCategoryTag: 'AKS'

      workloadSubCategoryTag: 'Node Pool'

      applicationNameTag: 'Pega'

      projectIdTag: '11056600'

      projectNameTag: 'Pega AKS'

      runJob10:  false             #scaledown prod pods

      runJob101: false             #scaledown dr pods

      runJob102: false             #Uninstall helm chart prod

      runJob103: true             #unistall Helm chard dr

      runJob11:  false             #Create nodepool on AKS cluster

      runJob12:  false             #ANG:failover SC-NC

      runJob120: false               #trucating tables 

      runJob13:  true              #ANG:failback NC-SC

      runJob14:  false              #scaleup prod pods

      runJob15:  true              #delete node pool

      dependsOn: Job14

      dependsOn1: Job5

     

 

pool:

  name: AKSFoundation

  demands: Agent.Name -equals DC10AKSJMPBX110

 

jobs:

 

- job: approval

  displayName: 'Wait for approval'

  pool: server

  timeoutInMinutes: 4320 # approval job can wait up to 3 days

  steps:

  - task: ManualValidation@0

    timeoutInMinutes: 1440 # task can wait up to 1 day

    inputs:

      notifyUsers: 'mohan.maremanda@molinahealthcare.com' # replace with actual approver email

      instructions: 'Please validate the deployment and approve.'

      onTimeout: 'reject'

 

- job: job1

  displayName: Verify Parameters

  condition: eq(variables.runJob1, true)

  steps:

  - task: PowerShell@2

    inputs:

      targetType: 'inline'

      script: |

        echo "---------------"

        echo appname:${{parameters.envDetail[parameters.envName].appname}}

        echo namespace:${{parameters.envDetail[parameters.envName].namespace}} 

        echo helmpath:${{parameters.envDetail[parameters.envName].helmpath}}  

        echo valuefile:${{parameters.envDetail[parameters.envName].valuefile}}

        echo "---------------"

        # echo azureSubscription:${{parameters.envDetail[parameters.envName].azureSubscription}} keyvault:${{parameters.envDetail[parameters.envName].keyvault}}        

        # echo tenant:${{parameters.envDetail[parameters.envName].tenant}} targetFolder:${{parameters.envDetail[parameters.envName].targetFolder}}

        # echo azureResourceGroup:${{parameters.envDetail[parameters.envName].azureResourceGroup}} kubernetesCluster:${{parameters.envDetail[parameters.envName].kubernetesCluster}}

        # echo namespace:${{parameters.envDetail[parameters.envName].namespace}} poolName:${{parameters.envDetail[parameters.envName].poolName}} 

        # echo deploymentPath:${{parameters.envDetail[parameters.envName].deploymentPath}} csvcontents: ${{parameters.envDetail[parameters.envName].csvcontents}}

        # echo certsecret:${{parameters.envDetail[parameters.envName].certsecret}} certpath: ${{parameters.envDetail[parameters.envName].certpath}}

        # echo tlscertsecret:${{parameters.envDetail[parameters.envName].tlscertsecret}} tlscertpath: ${{parameters.envDetail[parameters.envName].tlscertpath}}

        # echo tlskeypath:${{parameters.envDetail[parameters.envName].tlskeypath}} 

        #az login --service-principal -u 51e29b4b-9181-47a9-a00d-0d1366db58f4 -p g~i8Q~-sZh4nLgW_4NMUPETPCGBmc2AXwF6wfbgN --tenant 5e625f8d-0b53-4f56-9e46-19fa14bb2e5c

        #az account set --subscription 051ce839-3786-4339-b3fd-df3efda185de

        #az aks get-credentials --resource-group BusApp-AKSPega-PROD --name DC10AKSPEGAPROD01 --file 'E:\DevOps\Pega AKS\.kube\config' --overwrite-existing

        #kubelogin convert-kubeconfig -l spn --client-id 51e29b4b-9181-47a9-a00d-0d1366db58f4 --client-secret g~i8Q~-sZh4nLgW_4NMUPETPCGBmc2AXwF6wfbgN --kubeconfig='E:\DevOps\Pega AKS\.kube\config'

        

- job: Job2

  dependsOn: Job15 

  displayName: Copy secrets from CSV file to AKV

  condition: and(eq(variables.runJob2, true), eq(variables.proddrJobs, true))

  steps:

  - task: AzureKeyVault@1

    inputs:

      azureSubscription: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      KeyVaultName: ${{parameters.envDetail[parameters.envName].keyvault}}

      SecretsFilter: 'spn,spnPassword,tenant'

  - task: AzureCLI@2

    inputs:

      connectedServiceNameARM: ${{parameters.envDetail[parameters.envName].azureSubscription}}      

      scriptType: 'pscore'

      scriptLocation: 'inlineScript'

      inlineScript: |

        az login --service-principal -u "$(spn)" -p "$(spnPassword)" -t "$(tenant)"

        Write-Host "Connected to Azure"

 

  - task: CopyFiles@2

    inputs:

      Contents: ${{parameters.envDetail[parameters.envName].csvcontents}}

      targetFolder: ${{parameters.envDetail[parameters.envName].targetFolder}}

 

  - task: PowerShell@2

    inputs:

      targetType: 'inline'

      script: |

        $secrets = Import-Csv -Path "${{parameters.envDetail[parameters.envName].targetFolder}}/${{parameters.envDetail[parameters.envName].csvcontents}}"

        foreach ($secret in $secrets) {

          if (![string]::IsNullOrEmpty($secret.name) -and ![string]::IsNullOrEmpty($secret.value)) {

            Write-Host "Setting secret $($secret.name) in Azure Key Vault"

            try {

              az login --service-principal -u "$(spn)" -p "$(spnPassword)" -t "$(tenant)"

              az keyvault secret set --vault-name "${{parameters.envDetail[parameters.envName].keyvault }}" --name "$($secret.name)" --value "$($secret.value)"

            } catch {

              Write-Host "Failed to set secret $($secret.name)"

            }

          }

        }

 

- job: Job3

  displayName: Copy & create secret values from AKV to AKS

  condition: and(always(), eq(variables.runJob3, true))

  dependsOn: Job15

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

 

  - checkout: self

    persistCredentials: true

 

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: '${{parameters.envDetail[parameters.envName].azureSubscription}}'

      azureResourceGroup: '${{parameters.envDetail[parameters.envName].azureResourceGroup}}'

      kubernetesCluster: '${{parameters.envDetail[parameters.envName].kubernetesCluster}}'

      command: 'login'

 

  - script: |         

       kubectl apply -f ${{parameters.envDetail[parameters.envName].deploymentPath}}  -n ${{parameters.envDetail[parameters.envName].namespace}}

       kubectl apply -f ${{parameters.envDetail[parameters.envName].deploymentPath1}}  -n ${{parameters.envDetail[parameters.envName].namespace}}

 

- job: Job4

  displayName: Create certificates with secret names in AKS

  condition: and(always(), eq(variables.runJob4, true))

  dependsOn: Job3

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

 

  - checkout: self

    persistCredentials: true

 

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: '${{parameters.envDetail[parameters.envName].azureSubscription}}'

      azureResourceGroup: '${{parameters.envDetail[parameters.envName].azureResourceGroup}}'

      kubernetesCluster: '${{parameters.envDetail[parameters.envName].kubernetesCluster}}'

      useClusterAdmin: true

      command: 'login'

 

  - powershell: |

      $certsecret = "${{parameters.envDetail[parameters.envName].certpath}}"

      $files = Get-ChildItem -Path $certsecret -File

        foreach ($file in $files) {          

          $name = $file.Name.ToLower()        

          $certsecret1 = "${{parameters.envDetail[parameters.envName].env_name}}-" + ($name -replace '.crt$', '-crt' -replace '.cer$', '-cer')

          kubectl create   secret   generic $certsecret1    --from-file="${{parameters.envDetail[parameters.envName].certpath}}"/"$name" -n ${{parameters.envDetail[parameters.envName].namespace}}

        }      

 

- job: Job5

  displayName: Create TLS certificates with secret names in AKS

  condition: and(always(), eq(variables.runJob5, true))

  dependsOn: Job4

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

 

  - checkout: self

    persistCredentials: true

 

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].azureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].kubernetesCluster}}

      command: 'login' 

     #Add a check to see if the secret exists..

  - script: |

      kubectl delete secret  ${{parameters.envDetail[parameters.envName].tlscertsecret}}  -n ${{parameters.envDetail[parameters.envName].namespace}}  

      kubectl create secret tls  ${{parameters.envDetail[parameters.envName].tlscertsecret}}   --key=${{parameters.envDetail[parameters.envName].tlskeypath}} --cert=${{parameters.envDetail[parameters.envName].tlscertpath}} -n ${{parameters.envDetail[parameters.envName].namespace}}      

- job: Job6

  displayName: Web deployment file environment name change

  condition: and(always(), eq(variables.runJob6, true))

  dependsOn: ${{parameters.envDetail[parameters.envName].dependsOn1}}

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

  - checkout: self

    persistCredentials: true

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].azureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].kubernetesCluster}}

      command: 'login'

 

  - powershell: | 

      $webcreate = "${{parameters.envDetail[parameters.envName].webpath}}" 

      $files = Get-ChildItem -Path $webcreate -File

        foreach ($file in $files) {          

          $name = $file.Name                     

          kubectl apply -f ${{parameters.envDetail[parameters.envName].webpath}}/"$name" -n ${{parameters.envDetail[parameters.envName].namespace}}          

        }  

 

- job: Job7

  dependsOn: Job6

  displayName: 'Deploy Pega Application'

  condition: and(always(), eq(variables.runJob7, true))

  

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

  - checkout: self

    persistCredentials: true

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].azureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].kubernetesCluster}}

      command: 'login'

  - powershell: | 

      $ErrorActionPreference = 'SilentlyContinue'

      $releaseExists = helm status "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}"

      if ($?) {

          helm uninstall "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}"

      }

      helm install "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}" ${{parameters.envDetail[parameters.envName].helmpath}}  --values "${{parameters.envDetail[parameters.envName].valuefile}}"

      $ErrorActionPreference = 'Continue'

 

- job: Job8

  dependsOn: Job7

  displayName: 'Upgrade Pega Application'

  condition: and(always(), eq(variables.runJob8, true))

 

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

  - checkout: self

    persistCredentials: true

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].azureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].kubernetesCluster}}

      command: 'login'

  - powershell: | 

      $appExists = (helm list -n "${{parameters.envDetail[parameters.envName].namespace}}" --filter "^${{parameters.envDetail[parameters.envName].appname}}$").Trim()

       if ($appExists -ne "") {

             helm uninstall "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}"

        }

             helm install "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}" ${{parameters.envDetail[parameters.envName].helmpath}}  --values "${{parameters.envDetail[parameters.envName].valuefile}}"

 

- job: Job9

  displayName: rollout restart deployment

  condition: and(always(), eq(variables.runJob9, true))

  dependsOn: Job8

  steps:

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].azureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].kubernetesCluster}}

      command: 'login'

  - powershell: |                            

          kubectl rollout restart deployment "${{parameters.envDetail[parameters.envName].deployment_env_name_prefix}}-batch" -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl rollout restart deployment "${{parameters.envDetail[parameters.envName].deployment_env_name_prefix}}-bix" -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl rollout restart deployment "${{parameters.envDetail[parameters.envName].deployment_env_name_prefix}}-fax" -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl rollout restart deployment "${{parameters.envDetail[parameters.envName].deployment_env_name_prefix}}-web" -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl rollout restart deployment "${{parameters.envDetail[parameters.envName].deployment_env_name_prefix}}-web-api" -n ${{parameters.envDetail[parameters.envName].namespace}}

 

- job: Job10

  displayName: scale down pods for prod

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob10}},true))

  steps:

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].prodazureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].prodazureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].prodKubernetesCluster}}

      command: 'login'

  - powershell: |                            

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-batch" --replicas=0 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-bix" --replicas=0 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-fax" --replicas=0 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-web" --replicas=0 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-web-api" --replicas=0 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

 

- job: Job101

  displayName: scale down pods for dr

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob101}},true))

  steps:

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].drazureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].drazureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].drkubernetesCluster}}

      command: 'login'

  - powershell: |                            

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].env_name}}-batch" --replicas=0 -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].env_name}}-bix" --replicas=0 -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].env_name}}-fax" --replicas=0 -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].env_name}}-web" --replicas=0 -n ${{parameters.envDetail[parameters.envName].namespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].env_name}}-web-api" --replicas=0 -n ${{parameters.envDetail[parameters.envName].namespace}}

 

- job: Job102

  displayName: 'Uninstall Pega Application Prod'

  condition: and(eq(variables.proddrJobs,true) , eq(${{parameters.envDetail[parameters.envName].runJob102}},true) )

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

  - checkout: self

    persistCredentials: true

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].prodazureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].prodazureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].prodKubernetesCluster}}

      command: 'login'

  - powershell: | 

      $releaseExists = helm status "${{parameters.envDetail[parameters.envName].prodAppname}}" -n "${{parameters.envDetail[parameters.envName].prodNamespace}}"

      if ($?) {

          helm uninstall "${{parameters.envDetail[parameters.envName].prodAppname}}" -n "${{parameters.envDetail[parameters.envName].prodNamespace}}"

      }

 

- job: Job103

  displayName: 'Uninstall Pega Application Dr'

  condition: and(eq(variables.proddrJobs,true) , eq(${{parameters.envDetail[parameters.envName].runJob103}},true) )

  steps:

  - task: HelmInstaller@1

    inputs:

      helmVersionToInstall: 'latest'

  - checkout: self

    persistCredentials: true

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].drazureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].drazureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].drkubernetesCluster}}

      command: 'login'

  - powershell: | 

      $releaseExists = helm status "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}"

      if ($?) {

          helm uninstall "${{parameters.envDetail[parameters.envName].appname}}" -n "${{parameters.envDetail[parameters.envName].namespace}}"

      }

 

- job: Job11

  dependsOn: Job10

  displayName: Create nodepool on AKS cluster

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob11}},true))

  steps:  

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].drnpazureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].drazureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].drkubernetesCluster}}

      command: 'login'

  - task: AzureCLI@2

    inputs:

      connectedServiceNameARM: ${{parameters.envDetail[parameters.envName].azureNodePoolSubscription}}      

      scriptType: 'pscore'

      scriptLocation: 'inlineScript'

      inlineScript: |

        $subscriptionId = "${{parameters.envDetail[parameters.envName].subscriptionId}}"

        $vnetResourceGroup = "${{parameters.envDetail[parameters.envName].vnetResourceGroup}}"

        $azureResourceGroup = "${{parameters.envDetail[parameters.envName].azureResourceGroup}}"

        $vnetName = "${{parameters.envDetail[parameters.envName].vnetName}}"

        $nodeSubnet = "${{parameters.envDetail[parameters.envName].nodeSubnet}}"

        $podSubnetId = "/subscriptions/051ce839-3786-4339-b3fd-df3efda185de/resourceGroups/NC-PROD-SPO-VNET-01-RG/providers/Microsoft.Network/virtualNetworks/NC-PROD-SPO-VNET-01/subnets/NC-PROD-PaaS-AKS-PODS-01"

        $vnetSubnetId = "/subscriptions/051ce839-3786-4339-b3fd-df3efda185de/resourceGroups/NC-PROD-SPO-VNET-01-RG/providers/Microsoft.Network/virtualNetworks/NC-PROD-SPO-VNET-01/subnets/NC-PROD-PaaS-AKS-NODES-01"

        

        az aks nodepool add --cluster-name ${{parameters.envDetail[parameters.envName].drkubernetesCluster}} -g ${{parameters.envDetail[parameters.envName].drazureResourceGroup}} --os-sku ${{parameters.envDetail[parameters.envName].osSku}} -n ${{parameters.envDetail[parameters.envName].nodeName}} --enable-cluster-autoscaler --min-count ${{parameters.envDetail[parameters.envName].minCount}} --max-count ${{parameters.envDetail[parameters.envName].maxCount}} --node-vm-size ${{parameters.envDetail[parameters.envName].vmSize}} --node-count ${{parameters.envDetail[parameters.envName].nodeCount}} --labels application=${{parameters.envDetail[parameters.envName].applicationLabel}} environment=${{parameters.envDetail[parameters.envName].environmentLabel}} category=${{parameters.envDetail[parameters.envName].categoryLabel}} --node-taints App=${{parameters.envDetail[parameters.envName].appTaint}}:NoSchedule --max-pods ${{parameters.envDetail[parameters.envName].maxPods}} --node-count ${{parameters.envDetail[parameters.envName].nodeCount}} --vnet-subnet-id $vnetSubnetId --pod-subnet-id $podSubnetId --tags "Environment=${{parameters.envDetail[parameters.envName].environmentTag}}" "Parent-Service=${{parameters.envDetail[parameters.envName].parentServiceTag}}" "Workload-Category=${{parameters.envDetail[parameters.envName].workloadCategoryTag}}" "Workload-Sub-Category=${{parameters.envDetail[parameters.envName].workloadSubCategoryTag}}" "Application-Name=${{parameters.envDetail[parameters.envName].applicationNameTag}}" "Project-Id=${{parameters.envDetail[parameters.envName].projectIdTag}}" "Project-Name=${{parameters.envDetail[parameters.envName].projectNameTag}}"

        az aks nodepool add --cluster-name ${{parameters.envDetail[parameters.envName].drkubernetesCluster}} -g ${{parameters.envDetail[parameters.envName].drazureResourceGroup}} --os-sku ${{parameters.envDetail[parameters.envName].osSku}} -n ${{parameters.envDetail[parameters.envName].nodeName1}} --enable-cluster-autoscaler --min-count ${{parameters.envDetail[parameters.envName].minCount}} --max-count ${{parameters.envDetail[parameters.envName].maxCount}} --node-vm-size ${{parameters.envDetail[parameters.envName].vmSize}} --node-count ${{parameters.envDetail[parameters.envName].nodeCount}} --labels application=${{parameters.envDetail[parameters.envName].applicationLabel}} environment=${{parameters.envDetail[parameters.envName].environmentLabel}} category=${{parameters.envDetail[parameters.envName].categoryLabel}} --node-taints App=${{parameters.envDetail[parameters.envName].appTaint1}}:NoSchedule --max-pods ${{parameters.envDetail[parameters.envName].maxPods}} --node-count ${{parameters.envDetail[parameters.envName].nodeCount}} --vnet-subnet-id $vnetSubnetId --pod-subnet-id $podSubnetId --tags "Environment=${{parameters.envDetail[parameters.envName].environmentTag}}" "Parent-Service=${{parameters.envDetail[parameters.envName].parentServiceTag}}" "Workload-Category=${{parameters.envDetail[parameters.envName].workloadCategoryTag}}" "Workload-Sub-Category=${{parameters.envDetail[parameters.envName].workloadSubCategoryTag}}" "Application-Name=${{parameters.envDetail[parameters.envName].applicationNameTag}}" "Project-Id=${{parameters.envDetail[parameters.envName].projectIdTag}}" "Project-Name=${{parameters.envDetail[parameters.envName].projectNameTag}}"

 

- job: Job12

  dependsOn: Job11

  displayName: ANG:failover SC-NC

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob12}},true))

  steps:

  - task: AzureKeyVault@1

    inputs:

      azureSubscription: ${{parameters.envDetail[parameters.envName].prodazureSubscription}}

      KeyVaultName: ${{parameters.envDetail[parameters.envName].prodkeyvault}}

      SecretsFilter: 'spn-sqlmi-angpega-dr,spn-sqlmi-angpega-drpass,tenant' 

  - task: AzureCLI@2

    inputs:

      connectedServiceNameARM: ${{parameters.envDetail[parameters.envName].azureSQLSubscription}}

      scriptType: 'pscore'

      scriptLocation: 'inlineScript'

      inlineScript: |

        az login --service-principal -u "$(spn-sqlmi-angpega-dr)" -p "$(spn-sqlmi-angpega-drpass)" -t "$(tenant)"

        az sql instance-failover-group set-primary -l northcentralus -n fog-sqlmi-pegaang-prod-03 -g BusApp-ANG-PROD-dr

 

- job: Job120

  dependsOn: Job12

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob120}},true))

  displayName: ANG:Truncate Pod Status

  pool:

    name: DevOpsforSQLPROD 

    demands: Agent.Name -equals DC10SQLAUTAPW01

  steps:

  - task: PowerShell@2

    inputs:

      targetType: 'inline'

      script: |

        $tenantid = "5e625f8d-0b53-4f56-9e46-19fa14bb2e5c"

        $Secretname = "spn-pega-aks-dr"

        $clientsecret = "s9Y8Q~IyzpgZxA5xoCQNNBxC-_pj.LLT1IXT7c1p"

        $secpasswd = ConvertTo-SecureString $clientsecret -AsPlainText -Force

        $Appid = "2c78a702-e4cf-4367-b6bf-d10048492e3e"

        $credential = New-Object System.Management.Automation.PScredential ($appid, $secpasswd)

        $tenantid = "5e625f8d-0b53-4f56-9e46-19fa14bb2e5c"

        $ConnectionString="Data Source=fog-sqlmi-pegaang-prod-03.22c7e84204a1.database.windows.net; Initial Catalog=Pega;"

        $Query="TRUNCATE TABLE [PEGADATA].[pr_sys_statusnodes];TRUNCATE TABLE [PEGADATA].[pr_sys_statusdetails] "

        Connect-AzAccount -ServicePrincipal -Credential $Credential -Tenant $tenantId

          #get token

          $context =Get-AzContext

          $dexResourceUrl='https://database.windows.net/'

          $token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account,

                                          $context.Environment, 

                                          $context.Tenant.Id.ToString(),

                                            $null, 

                                            [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never,

                                            $null, $dexResourceUrl).AccessToken

          $SqlConnection = New-Object System.Data.SqlClient.SqlConnection               

          $SqlCmd = New-Object System.Data.SqlClient.SqlCommand

          $SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter

          try 

          {

              $SqlConnection.ConnectionString = $ConnectionString

              if ($token)

              {

                  $SqlConnection.AccessToken = $token

              }

              $SqlConnection.Open()

              $SqlCmd.Connection = $SqlConnection 

              $SqlCmd.CommandText = $Query

              $SqlAdapter.SelectCommand = $SqlCmd

              $DataSet = New-Object System.Data.DataSet

              $SqlAdapter.Fill($DataSet)

              #Outputs query

              $DataSet.Tables

          }

          finally

          {

              $SqlAdapter.Dispose()

              $SqlCmd.Dispose()

              $SqlConnection.Dispose()

          }

        Disconnect-AzAccount

 

- job: Job13

  dependsOn: Job12

  displayName: ANG:failback NC-SC

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob13}},true))

  steps: 

  - task: AzureKeyVault@1

    inputs:

      azureSubscription: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      KeyVaultName: ${{parameters.envDetail[parameters.envName].keyvault}}

      SecretsFilter: 'spn-sqlmi-angpega-dr,spn-sqlmi-angpega-drpass,tenant'  

  - task: AzureCLI@2

    inputs:

      connectedServiceNameARM: ${{parameters.envDetail[parameters.envName].azureSQLSubscription}}      

      scriptType: 'pscore'

      scriptLocation: 'inlineScript'

      inlineScript: |        

        az login --service-principal -u "$(spn-sqlmi-angpega-dr)" -p "$(spn-sqlmi-angpega-drpass)" -t "$(tenant)"

        az sql instance-failover-group set-primary -l southcentralus -n fog-sqlmi-pegaang-prod-03 -g BusApp-ANG-PROD

        

 

- job: Job14

  displayName: scale up prod pods

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob14}},true))

  dependsOn: Job13

  steps:

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].prodAzureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].prodAzureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].prodKubernetesCluster}}

      command: 'login'

  - powershell: |                            

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-batch" --replicas=1 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-bix" --replicas=1 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-fax" --replicas=1 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-web" --replicas=1 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

          kubectl scale deployment "ang-pega-${{parameters.envDetail[parameters.envName].prod_env_name}}-web-api" --replicas=1 -n ${{parameters.envDetail[parameters.envName].prodNamespace}}

 

- job: Job15

  displayName: delete nodepool on DR AKS cluster

  condition: and(eq(variables.proddrJobs,true),eq(${{parameters.envDetail[parameters.envName].runJob15}},true))

  steps:  

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].drnpazureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].drazureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].drkubernetesCluster}}

      command: 'login'

  - task: AzureCLI@2

    inputs:

      connectedServiceNameARM: ${{parameters.envDetail[parameters.envName].azureNodePoolSubscription}}      

      scriptType: 'pscore'

      scriptLocation: 'inlineScript'

      inlineScript: |

        #if any pods are running don't execute these

 

        # $output = (kubectl get pods -n ${{parameters.envDetail[parameters.envName].namespace}} -o jsonpath="{.items[*].status.containerStatuses[*].ready}" | Select-String -Pattern "true" -AllMatches).Matches.Count

 

        # # Print the number of ready pods

        # Write-Output "Number of ready pods: $($output)"

 

        # Get the total number of pods

        # $umPodstotal = (kubectl get pods -n ${{parameters.envDetail[parameters.envName].namespace}} --no-headers).Count

        $angPodstotal = (kubectl get pods -n ${{parameters.envDetail[parameters.envName].angNamespace}} --no-headers).Count

        Write-Output "Number of ang pega pods: $($angPodstotal)"

 

        # Check if all pods are ready

        if ($angPodstotal -eq 0) {

          az aks nodepool delete --cluster-name ${{parameters.envDetail[parameters.envName].drkubernetesCluster}} -g ${{parameters.envDetail[parameters.envName].drazureResourceGroup}}  -n  ${{parameters.envDetail[parameters.envName].nodeName}} 

          az aks nodepool delete --cluster-name ${{parameters.envDetail[parameters.envName].drkubernetesCluster}} -g ${{parameters.envDetail[parameters.envName].drazureResourceGroup}}  -n ${{parameters.envDetail[parameters.envName].nodeName1}} 

        }else{

          throw "Ang app already deployed...Pls check"

        }

 

            

- job: CheckPodsStaus

  dependsOn: ${{parameters.envDetail[parameters.envName].dependsOn}}

  displayName: Check Pods Status on the namespace

  condition: and(always(), eq(variables.checkPodsStatus, true))

  steps:  

  - task: Kubernetes@1

    displayName: 'kubectl login'

    inputs:

      connectionType: 'Azure Resource Manager'

      azureSubscriptionEndpoint: ${{parameters.envDetail[parameters.envName].azureSubscription}}

      azureResourceGroup: ${{parameters.envDetail[parameters.envName].azureResourceGroup}}

      kubernetesCluster: ${{parameters.envDetail[parameters.envName].kubernetesCluster}}

      command: 'login'

 

  - powershell: |

        $maxWaitTime=800              

        $interval = 30                

                $start_time = Get-Date

                Write-Host "Scanning Start Timestamp: $($start_time)"

 

                do {

                    # Get the status of all pods in the namespace

                    $output = (kubectl get pods -n ${{parameters.envDetail[parameters.envName].namespace}} -o jsonpath="{.items[*].status.containerStatuses[*].ready}" | Select-String -Pattern "true" -AllMatches).Matches.Count

 

                    # Print the number of ready pods

                    Write-Output "Number of ready pods: $($output)"

 

                    # Get the total number of pods

                    $total = (kubectl get pods -n ${{parameters.envDetail[parameters.envName].namespace}} --no-headers).Count

 

                    # Check if all pods are ready

                    if ($output -eq $total) {

                        break

                    }

 

                    # Check the elapsed time

                    $elapsed_time = ((Get-Date) - $start_time).TotalSeconds

 

                    if ($elapsed_time -ge $maxWaitTime) {

                        throw "Not all pods are ready after waiting for $maxWaitTime seconds."

                    }

 

                    # Wait for the interval time

                    Start-Sleep -Seconds $interval

                } while ($true)

 

                # Calculate and print the elapsed time

                $end_time = Get-Date

                $duration_min = $end_time - $start_time

                # Write-Host ("Total Time Elapsed in Minutes: $duration_min.TotalMinutes")




      

      

    

 

 