---

global:
  # Enter your Kubernetes provider.
  provider: "aks"

 

  deployment:
    # The name specified will be used to prefix all of the Pega pods (replacing "pega" with something like "app1-dev").
    name: "angpega-stage" 

  # Deploy Pega nodes
  actions:
    execute: "deploy" 

  # Add custom certificates to be mounted to container
  # to support custom certificates as plain text (less secure), pass them directly using the certificates parameter;
  # to support multiple custom certificates as external secrets, specify each of your external secrets
  # as an array of comma-separated strings using the certificatesSecrets parameter.
  certificatesSecrets: [stg-pdc2-cer,stg-pdc1-cer,stg-qnxtstgwp0.molina.mhc-crt,stg-pdc6-cer,stg-pdc5-cer,stg-pdc4-cer,stg-pdc3-cer,stg-apiuat.molina.mhc-crt,stg-apistage.molina.mhc-crt,stg-apistageaz.molina.mhc-crt,stg-apiqa.molina.mhc-crt,stg-admere.net-crt,stg-iowa.gov-crt,stg-health.ny.gov-crt,stg-hayes.tractsoft.io-crt,stg-epro.prd-eastus2.cs.o360.cloud-crt,stg-cs44.salesforce-crt,stg-changecompanies.net-crt,stg-careadvance.molinahealthcare-crt,stg-newcenturyhealth-crt,stg-ne.gov-crt,stg-molinassrs2016prod.molina.mhc-crt,stg-molinaprod.molina.mhc-cer,stg-mhint.molina.mhc-crt,stg-mcgum.molina.mhc-crt,stg-legis.iowa.gov-crt,stg-sharepoint-crt,stg-pwsprodsancert.molinahealthcare-crt,stg-pwsprodsancert.molinahealthcare2-crt,stg-powerbi-crt,stg-pngapiuat.molina.mhc-crt,stg-periscope365-crt,stg-www.cms.gov-crt,stg-www.carelon-crt,stg-ums.molina.mhc-crt,stg-umpega.molinahealthcare-crt,stg-stamp2.login.microsoftonline-crt,stg-specialtydrug.magellanprovider-crt,stg-sni.cloudflaressl-crt,stg-www.uptodate-crt,stg-www.tmhp-crt,stg-www.startup.ny.gov-crt,stg-www.locusreporter-crt,stg-www.emedny.org-crt]

  certificates: 
  # If a storage class to be passed to the VolumeClaimTemplates in search and stream pods, it can be specified here:
  storageClassName: ""
  # Provide JDBC connection information to the Pega relational database
  #   If you are installing or upgrading on IBM DB2, update the udb.conf file in the /charts/pega/charts/installer/config/udb directory with any additional connection properties.
  jdbc:
    #   SQL Server          jdbc:sqlserver://localhost:1433;databaseName=dbName;selectMethod=cursor;sendStringParametersAsUnicode=false
    url: "jdbc:sqlserver://sc-sqlmi-angpega-stg-02.3281ee7a4e53.database.windows.net:1433;databaseName=PEGA;selectMethod=cursor;sendStringParametersAsUnicode=false;Authentication=ActiveDirectoryMSI;MSIClientId=2a614bdd-4d5f-44cd-b5ab-e85d2466e6f9;selectMethod=cursor;sendStringParametersAsUnicode=false"

    #   driverClass   -- jdbc class.  Valid values are:
    #   SQL Server          com.microsoft.sqlserver.jdbc.SQLServerDriver
    driverClass: "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    #   pega.database.type  Valid values are: mssql, oracledate, udb, db2zos, postgres
    dbType: "mssql"
    #   For databases that use multiple JDBC driver files (such as DB2), specify comma separated values for 'driverUri'
    #driverUri: "https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/8.2.2.jre8/mssql-jdbc-8.2.2.jre8.jar"
    #driverUri: "https://scsapegaangstg.blob.core.windows.net/jdbc/mssql-jdbc-11.2.3.jre11.jar?sp=r&st=2023-12-19T18:27:48Z&se=2024-02-19T02:27:48Z&spr=https&sv=2022-11-02&sr=b&sig=e1rbfMC4LXKHXvQqRcGuPNbjqbDc1rYcrLIOd5s9GIg%3D"
    driverUri: "https://scsapegaangstg.blob.core.windows.net/jdbc/mssql-jdbc-11.2.3.jre11.jar?sv=2023-01-03&st=2024-02-19T17%3A34%3A16Z&se=2024-05-19T16%3A34%3A16Z&sr=b&sp=r&sig=9yuqwA4Dg5IQtyOtqqHwvVIEr6T%2FM25uuc715Rk5jz8%3D"
             

    username:       # update to DB username
    password:     #update to DB pwd
    # To avoid exposing username & password, leave the jdbc.password & jdbc.username parameters empty (no quotes),
    # configure  JDBC username & password parameters in the External Secrets Manager, and enter the external secret for the credentials
    # make sure the keys in the secret should be DB_USERNAME and DB_PASSWORD respectively
    external_secret_name: "ang-pega-cred-secrets-stage"
    # CUSTOM CONNECTION PROPERTIES
    # Add a list of ; delimited connections properties. The list must end with ;
    # For example: connectionProperties=user=usr;password=pwd;
    connectionProperties: "maxActive='100';maxIdle='80';minIdle='25';validationQuery='select 1 from dual';testOnReturn='true';testOnBorrow='true';testWhileIdle='true';removeAbandoned='true';removeAbandonedTimeout='300';timeBetweenEvictionRunsMillis='30000'"
    rulesSchema: "PEGARULES"
    dataSchema: "PEGADATA"
    customerDataSchema: ""
    MAX_ACTIVE: "100"
    MAX_IDLE: "30"
    MAX_WAIT: "10000"  

  customArtifactory:
    # If you use a secured custom artifactory to manager your JDBC driver,
    # provide the authentication details below by filling in the appropriate authentication section,
    # either basic or apiKey.
    authentication:
      # Provide the basic authentication credentials or the API key authentication details to satisfy your custom artifactory authentication mechanism.
      basic:
        username: ""
        password: ""
      apiKey:
        headerName: ""
        value: ""
      # To avoid exposing basic.username,basic.password,apiKey.headerName,apiKey.value parameters, configure the
      # basic.username,basic.password,apiKey.headerName,apiKey.value parameters in External Secrets Manager, and enter the external secret for the credentials
      # make sure the keys in the secret should be CUSTOM_ARTIFACTORY_USERNAME , CUSTOM_ARTIFACTORY_PASSWORD , CUSTOM_ARTIFACTORY_APIKEY_HEADER , CUSTOM_ARTIFACTORY_APIKEY
      external_secret_name: ""
    # Leave customArtifactory.enableSSLVerification enabled to ensure secure access to your custom artifactory;
    # when customArtifactory.enableSSLVerification is false, SSL verification is skipped and establishes an insecure connection.
    enableSSLVerification: false
    # Provide a required domain certificate for your custom artifactory; if none is required, leave this field blank.
    certificate: 

  docker:
    # If using a custom Docker registry, supply the credentials here to pull Docker images.
    registry:
      #url: "acrstg02.azurecr.io"
      #username: "acrstg02"
      #password: "zgnp/ESw5ZlpRZIovlLLE6i8u19cPvsr"
    # To avoid exposing Docker registry details, create secrets to manage your Docker registry credentials.
    # Specify secret names as an array of comma-separated strings in double quotation marks using the imagePullSecretNames parameter. For example: ["secret1", "secret2"]
    imagePullSecretNames: []
    # Docker image information for the Pega docker image, containing the application server.
    pega:
      image: "acrstg02.azurecr.io/pega/pega/pega:8.23.0"
  utilityImages:
    busybox:
      # image: alpine:3.16.0
      image: "acrstg02.azurecr.io/pega/pega/busybox:1.31.0"
      imagePullPolicy: IfNotPresent
      #nodeSelector: 
        #"category": dvlnxs
        #"environment": development
#    k8s_wait_for:
#      image: pegasystems/k8s-wait-for
#     imagePullPolicy: "IfNotPresent"
      # waitTimeSeconds: 2
      # maxRetries: 1
 

  # Specify the Pega tiers to deploy
  tier:
    - name: "web"
      # Create a an interactive tier for web users.  This tier uses
      # the WebUser node type and will be exposed via a service to
      # the load balancer.
      # applicableNodeType: "WebUser,Search,BackgroundProcessing,FaxProcessing"
      catalinaOpts: "-DapplicableNodeTypes=WebUser,BackgroundProcessing,Search,FaxProcessing,Stream,BIX"
      nodeType: "WebUser"
      nodeSelector:
        application: pega_stg  
      tolerations:
      - key: "App"
        operator: "Equal"
        value: "pega-web-stg"
        effect: "NoSchedule"
      custom:
        volumes:
          - name: angpeganfsstg
            persistentVolumeClaim:
              claimName: sc-pvc-anf-pegaang-stg-01 
          - name: secrets-store-inline
            csi:
              driver: secrets-store.csi.k8s.io
              readOnly: true
              volumeAttributes:
                secretProviderClass: "pega-secrets-stage"
        volumeMounts:
          - name: secrets-store-inline
            mountPath: /mnt/secrets-store
            readOnly: true
          - name: angpeganfsstg
            mountPath: /angpeganfsstg/logs/ang-pega-stg
        env: &tierenv
          - name: CONTEXT_XML_SNIPPET
            value: |-
              <Resource name="jdbc/Pega_EDSBLOBANG"
              auth="Container"
              type="javax.sql.DataSource"
              driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver"
              url="jdbc:sqlserver://sc-sqlmi-angpeg-stg-02.3281ee7a4e53.database.windows.net:1433;database=EDSBLOBANG;SelectMethod=cursor;SendStringParametersasUnicode=false;Authentication=ActiveDirectoryMSI;MSIClientId=2a614bdd-4d5f-44cd-b5ab-e85d2466e6f9;selectMethod=cursor;sendStringParametersAsUnicode=false"

              maxTotal="100"
              maxIdle="30"
              maxWaitMillis="1000"
              removeAbandonedOnBorrow="true"
              removeAbandonedTimeout="300" />       
    #  nodeSelector:
    #    "category": dvlnxs
    #    "environment": development
      # nodeType: "WebUser,Search,BackgroundProcessing"
      # Pega requestor specific properties
      requestor:
        # Inactivity time after which requestor is passivated
        passivationTimeSec: 900

 

      # service:
        # # For help configuring the service block, see the Helm chart documentation

        # # https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#service
        # httpEnabled: true
        # port: 80
        # targetPort: 8080
        # # serviceType: "LoadBalancer"        
        # # To configure TLS between the ingress/load balancer and the backend, set the following:
        # tls:
          # enabled: false
          # # To avoid entering the certificate values in plain text, configure the keystore, keystorepassword, cacertificate parameter
          # # values in the External Secrets Manager, and enter the external secret name below
          # # make sure the keys in the secret should be TOMCAT_KEYSTORE_CONTENT, TOMCAT_KEYSTORE_PASSWORD and ca.crt respectively
          # external_secret_name: 
          # keystore: 
          # keystorepassword: 
          # port: 443
          # targetPort: 8443
          # # set the value of CA certificate here in case of baremetal/openshift deployments - CA certificate should be in base64 format
          # # pass the certificateChainFile file if you are using certificateFile and certificateKeyFile
          # cacertificate:
          # # provide the SSL certificate and private key as a PEM format
          # certificateFile:
          # certificateKeyFile: 
          # # if you will deploy traefik addon chart and enable traefik, set enabled=true; otherwise leave the default setting.
          # traefik:
            # enabled: false
            # # the SAN of the certificate present inside the container
            # serverName: ""
            # # set insecureSkipVerify=true, if the certificate verification has to be skipped
            # insecureSkipVerify: false
      # nodeSelector: "kubernetes.io/os": linux
      ingress:
        # For help configuring the ingress block including TLS, see the Helm chart documentation
        # https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#ingress

        # Enter the domain name to access web nodes via a load balancer.
        #  e.g. web.mypega.example.com
        domain: "umpegastg1aks.molinahealthcare.com"
        # Configure custom path for given host along with pathType. Default pathType is ImplementationSpecific.
        # path:
        # pathType:
        annotations:
          kubernetes.io/ingress.class: nginx-f5
          nginx.ingress.kubernetes.io/affinity: cookie
          nginx.ingress.kubernetes.io/affinity-mode: persistent
        tls:
          # Enable TLS encryption
          enabled: true
          secretName: angpega-aks-stage-secret
          # useManagedCertificate: false
          # ssl_annotation:

      replicas: 1
      # javaOpts: "-Duser.timezone=America/Los_Angeles -Dpega.logdir=/angpeganfsstg/logs/ang-pega-stg"
      javaOpts: "-Duser.timezone=America/Los_Angeles"
      pegaDiagnosticUser: ""
      pegaDiagnosticPassword: ""

      # deploymentStrategy:
        # rollingUpdate:
          # maxSurge: 1
          # maxUnavailable: 0
        # type: RollingUpstagee 

      livenessProbe:
        port: 8080
        initialDelaySeconds: 600
        timeoutSeconds: 120
        periodSeconds: 120     

      readinessProbe:
        initialDelaySeconds: 150
        timeoutSeconds: 60
        periodSeconds: 60     

      startupProbe:
        initialDelaySeconds: 60
        periodSeconds: 70
        timeoutSeconds: 70
        periodSeconds: 70
        failureThreshold: 3      

        

 

      # Optionally overridde default resource specifications
      cpuRequest: 2.5
      memRequest: "20Gi"
      cpuLimit: 2.5
      memLimit: "24Gi"
      initialHeap: "16000m"
      maxHeap: "16000m" 

      # To configure an alternative user for custom image, set value for runAsUser.
      # To configure an alternative group for volume mounts, set value for fsGroup
      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context

      #securityContext:
      #  runAsUser: 9001
      #  fsGroup: 9001

 

      hpa:
        enabled: true
        enableCpuTarget: true
        enableMemoryTarget: false
        maxReplicas: 35
        minReplicas: 3
        targetAverageCPUValue: 1.55

        # targetAverageMemoryUtilization: 75
        # enabled: true
        # enableCpuTarget: true
        # enableMemoryTarget: true
        # maxReplicas: 4
        # minReplicas: 3
        # targetAverageCPUValue: 2.55
        # targetAverageMemoryUtilization: 75

      # Set enabled to true to include a Pod Disruption Budget for this tier.
      # To enable this budget, specifiy either a pdb.minAvailable or pdb.maxUnavailable
      # value and comment out the other parameter.
      pdb:
        enabled: false
        minAvailable: 1
        # maxUnavailable: "50%"        

    - name: "web-api"
      # Create a an interactive tier for web users.  This tier uses
      # the WebUser node type and will be exposed via a service to
      # the load balancer.
      # applicableNodeType: "WebUser,Search,BackgroundProcessing,FaxProcessing"
      catalinaOpts: "-DapplicableNodeTypes=WebUser,BackgroundProcessing,Search,FaxProcessing,Stream,BIX"
      nodeType: "WebUser"
      nodeSelector:
        application: pega_stg     

      tolerations:
      - key: "App"
        operator: "Equal"
        value: "pega-web-stg"
        effect: "NoSchedule"
      custom:
        volumes:
          - name: angpeganfsstg
            persistentVolumeClaim:
              claimName: sc-pvc-anf-pegaang-stg-01 
          - name: secrets-store-inline
            csi:
              driver: secrets-store.csi.k8s.io
              readOnly: true
              volumeAttributes:
                secretProviderClass: "pega-secrets-stage"

        volumeMounts:
          - name: secrets-store-inline
            mountPath: /mnt/secrets-store
            readOnly: true
          - name: angpeganfsstg
            mountPath: /angpeganfsstg/logs/ang-pega-stg 

        env: &tierenv
          - name: CONTEXT_XML_SNIPPET
            value: |-
              <Resource name="jdbc/Pega_AngReporting"
              auth="Container"
              type="javax.sql.DataSource"
              driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver"
              url="jdbc:sqlserver://sc-sqlmi-angpega-stg-02.3281ee7a4e53.database.windows.net:1433;database=PegaAnGReporting;SelectMethod=cursor;SendStringParametersasUnicode=false;Authentication=ActiveDirectoryMSI;MSIClientId=2a614bdd-4d5f-44cd-b5ab-e85d2466e6f9;selectMethod=cursor;sendStringParametersAsUnicode=false"

              maxTotal="100"
              maxIdle="30"
              maxWaitMillis="1000"
              removeAbandonedOnBorrow="true"
              removeAbandonedTimeout="300" />
              <Resource name="jdbc/Pega_Integration"
              auth="Container"
              type="javax.sql.DataSource"
              driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver"
              url="jdbc:sqlserver://sc-sqlmi-angpega-stg-02.3281ee7a4e53.database.windows.net:1433;database=Pega_Integration;SelectMethod=cursor;SendStringParametersasUnicode=false;Authentication=ActiveDirectoryMSI;MSIClientId=2a614bdd-4d5f-44cd-b5ab-e85d2466e6f9;selectMethod=cursor;sendStringParametersAsUnicode=false"

              maxTotal="100"
              maxIdle="30"
              maxWaitMillis="1000"
              removeAbandonedOnBorrow="true"
              removeAbandonedTimeout="300" />
              <Resource name="jdbc/Pega_EDSBLOBANG"
              auth="Container"
              type="javax.sql.DataSource"
              driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver"
              url="jdbc:sqlserver://sc-sqlmi-angpeg-stg-02.3281ee7a4e53.database.windows.net:1433;database=EDSBLOBANG;SelectMethod=cursor;SendStringParametersasUnicode=false;Authentication=ActiveDirectoryMSI;MSIClientId=2a614bdd-4d5f-44cd-b5ab-e85d2466e6f9;selectMethod=cursor;sendStringParametersAsUnicode=false"

              maxTotal="100"
              maxIdle="30"
              maxWaitMillis="1000"
              removeAbandonedOnBorrow="true"
              removeAbandonedTimeout="300" />
        

    #  nodeSelector:
    #    "category": dvlnxs
    #    "environment": development
      # nodeType: "WebUser,Search,BackgroundProcessing"
      # Pega requestor specific properties
      requestor:
        # Inactivity time after which requestor is passivated
        passivationTimeSec: 900

      # service:
        # # For help configuring the service block, see the Helm chart documentation
        # # https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#service
        # httpEnabled: true
        # port: 80
        # targetPort: 8080
        # # serviceType: "LoadBalancer"       

        # # To configure TLS between the ingress/load balancer and the backend, set the following:
        # tls:
          # enabled: false
          # # To avoid entering the certificate values in plain text, configure the keystore, keystorepassword, cacertificate parameter
          # # values in the External Secrets Manager, and enter the external secret name below
          # # make sure the keys in the secret should be TOMCAT_KEYSTORE_CONTENT, TOMCAT_KEYSTORE_PASSWORD and ca.crt respectively
          # external_secret_name: 
          # keystore: 
          # keystorepassword: 
          # port: 443
          # targetPort: 8443
          # # set the value of CA certificate here in case of baremetal/openshift deployments - CA certificate should be in base64 format
          # # pass the certificateChainFile file if you are using certificateFile and certificateKeyFile
          # cacertificate:
          # # provide the SSL certificate and private key as a PEM format
          # certificateFile:
          # certificateKeyFile: 
          # # if you will deploy traefik addon chart and enable traefik, set enabled=true; otherwise leave the default setting.

          # traefik:
            # enabled: false
            # # the SAN of the certificate present inside the container
            # serverName: ""

            # # set insecureSkipVerify=true, if the certificate verification has to be skipped
            # insecureSkipVerify: false
      # nodeSelector: "kubernetes.io/os": linux
      ingress:
        # For help configuring the ingress block including TLS, see the Helm chart documentation
        # https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#ingress 

        # Enter the domain name to access web nodes via a load balancer.
        #  e.g. web.mypega.example.com
        domain: "umpegaapistg1aks.molinahealthcare.com"
        # Configure custom path for given host along with pathType. Default pathType is ImplementationSpecific.
        # path:
        # pathType:
        annotations:
          kubernetes.io/ingress.class: nginx-f5
          nginx.ingress.kubernetes.io/affinity: cookie
          nginx.ingress.kubernetes.io/affinity-mode: persistent
        tls:
          # Enable TLS encryption
          enabled: true
          secretName: angpega-aks-stage-secret
          # useManagedCertificate: false
          # ssl_annotation: 

      replicas: 1
      javaOpts: "-Duser.timezone=America/Los_Angeles -Dpega.logdir=/angpeganfsstg/logs/ang-pega-stg"
      pegaDiagnosticUser: ""
      pegaDiagnosticPassword: ""

      # deploymentStrategy:
        # rollingUpdate:
          # maxSurge: 1
          # maxUnavailable: 0
        # type: RollingUpstagee 

      livenessProbe:
        port: 8080
        initialDelaySeconds: 600
        timeoutSeconds: 120
        periodSeconds: 120      

      readinessProbe:
        initialDelaySeconds: 300
        timeoutSeconds: 120
        periodSeconds: 120     

      startupProbe:
        initialDelaySeconds: 120
        periodSeconds: 120
        timeoutSeconds: 120
        periodSeconds: 120
        failureThreshold: 6       

        

 

      # # Optionally overridde default resource specifications
      # cpuRequest: 4
      # memRequest: "20Gi"
      # cpuLimit: 4
      # memLimit: "24Gi"
      # initialHeap: "16000m"
      # maxHeap: "16000m"
 

      cpuRequest: 4
      memRequest: "10Gi"
      cpuLimit: 4
      memLimit: "12Gi"
      initialHeap: "8000m"
      maxHeap: "8000m"

 

      # To configure an alternative user for custom image, set value for runAsUser.

      # To configure an alternative group for volume mounts, set value for fsGroup

      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context

      #securityContext:

      #  runAsUser: 9001

      #  fsGroup: 9001

 

      hpa:

        enabled: true

        enableCpuTarget: true

        enableMemoryTarget: false

        maxReplicas: 5

        minReplicas: 1

        targetAverageCPUValue: 2.55

 

 

      # Set enabled to true to include a Pod Disruption Budget for this tier.

      # To enable this budget, specifiy either a pdb.minAvailable or pdb.maxUnavailable

      # value and comment out the other parameter.

      pdb:

        enabled: false

        minAvailable: 1

        # maxUnavailable: "50%"

 

    - name: "batch"

      # Create a background tier for batch processing.  This tier uses

      # a collection of background node types and will not be exposed to

      # the load balancer.

      # applicableNodeType: "WebUser,Search,BackgroundProcessing,FaxProcessing"

      catalinaOpts: "-DapplicableNodeTypes=WebUser,BackgroundProcessing,Search,FaxProcessing,Stream,BIX"

      nodeType: "BackgroundProcessing,Search"

      tolerations:

      - key: "App"

        operator: "Equal"

        value: "pega-nonweb-stg"

        effect: "NoSchedule"

      custom:

        volumes:

          - name: angpeganfsstg

            persistentVolumeClaim:

              claimName: sc-pvc-anf-pegaang-stg-01 

          - name: secrets-store-inline

            csi:

              driver: secrets-store.csi.k8s.io

              readOnly: true

              volumeAttributes:

                secretProviderClass: "pega-secrets-stage"

        volumeMounts:

          - name: secrets-store-inline

            mountPath: /mnt/secrets-store

            readOnly: true

          - name: angpeganfsstg

            mountPath: /angpeganfsstg/logs/ang-pega-stg

        env: *tierenv

      nodeSelector: 

        application: pega_stg 

   

      

      replicas: 1

      javaOpts: "-Duser.timezone=America/Los_Angeles -Dpega.logdir=/angpeganfsstg/logs/ang-pega-stg"

 

      pegaDiagnosticUser: ""

      pegaDiagnosticPassword: ""

      

      # deploymentStrategy:

        # rollingUpdate:

          # maxSurge: 1

          # maxUnavailable: 0

        # type: RollingUpdate

        

      livenessProbe:

        port: 8080

        initialDelaySeconds: 600

        timeoutSeconds: 120

        periodSeconds: 120

      

      readinessProbe:

        initialDelaySeconds: 600

        timeoutSeconds: 120

        periodSeconds: 120

      

      startupProbe:

        initialDelaySeconds: 200

        periodSeconds: 120

        timeoutSeconds: 120

        periodSeconds: 120

        failureThreshold: 6

        

      # To configure an alternative user for your custom image, set value for runAsUser

      # To configure an alternative group for volume mounts, set value for fsGroup

      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context

 

      # Optionally overridde default resource specifications

      # cpuRequest: 4

      # memRequest: "20Gi"

      # cpuLimit: 4

      # memLimit: "24Gi"

      # initialHeap: "8000m"

      # maxHeap: "8000m"

 

      cpuRequest: 4

      memRequest: "10Gi"

      cpuLimit: 4

      memLimit: "12Gi"

      initialHeap: "8000m"

      maxHeap: "8000m"

 

      hpa:

        enabled: true

        enableCpuTarget: true

        enableMemoryTarget: false

        maxReplicas: 10

        minReplicas: 3

        targetAverageCPUValue: 2.55

 

      # Set enabled to true to include a Pod Disruption Budget for this tier.

      # To enable this budget, specifiy either a pdb.minAvailable or pdb.maxUnavailable

      # value and comment out the other parameter.

      pdb:

        enabled: false

        minAvailable: 1

        # maxUnavailable: "50%"

 

    - name: "fax"

      # Create a background tier for batch processing.  This tier uses

      # a collection of background node types and will not be exposed to

      # the load balancer.

      # applicableNodeType: "WebUser,Search,BackgroundProcessing,FaxProcessing"

      catalinaOpts: "-DapplicableNodeTypes=WebUser,BackgroundProcessing,Search,FaxProcessing,Stream,BIX"

      nodeType: "FaxProcessing"

      nodeSelector:

        application: pega_stg 

      tolerations:

      - key: "App"

        operator: "Equal"

        value: "pega-nonweb-stg"

        effect: "NoSchedule"

      custom:

        volumes:

          - name: angpeganfsstg

            persistentVolumeClaim:

              claimName: sc-pvc-anf-pegaang-stg-01 

          - name: secrets-store-inline

            csi:

              driver: secrets-store.csi.k8s.io

              readOnly: true

              volumeAttributes:

                secretProviderClass: "pega-secrets-stage"

        volumeMounts:

          - name: secrets-store-inline

            mountPath: /mnt/secrets-store

            readOnly: true

          - name: angpeganfsstg

            mountPath: /angpeganfsstg/logs/ang-pega-stg

      

        env: *tierenv

      

      replicas: 1

      javaOpts: "-Duser.timezone=America/Los_Angeles -Dpega.logdir=/angpeganfsstg/logs/ang-pega-stg"      

 

      pegaDiagnosticUser: ""

      pegaDiagnosticPassword: ""

      

              

      livenessProbe:

        port: 8080

        initialDelaySeconds: 600

        timeoutSeconds: 120

        periodSeconds: 120

      

      readinessProbe:

        initialDelaySeconds: 600

        timeoutSeconds: 120

        periodSeconds: 120

      

      startupProbe:

        initialDelaySeconds: 200

        periodSeconds: 120

        timeoutSeconds: 120

        periodSeconds: 120

        failureThreshold: 6

        

      # To configure an alternative user for your custom image, set value for runAsUser

      # To configure an alternative group for volume mounts, set value for fsGroup

      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context

 

      # Optionally overridde default resource specifications

      cpuRequest: 2

      memRequest: "6Gi"

      cpuLimit: 2

      memLimit: "10Gi"

      initialHeap: "4000m"

      maxHeap: "8000m"

 

      hpa:

        enabled: false




      # Set enabled to true to include a Pod Disruption Budget for this tier.

      # To enable this budget, specifiy either a pdb.minAvailable or pdb.maxUnavailable

      # value and comment out the other parameter.

      pdb:

        enabled: false

        minAvailable: 1

        # maxUnavailable: "50%"

 

    - name: "bix"

      # Create a background tier for batch processing.  This tier uses

      # a collection of background node types and will not be exposed to

      # the load balancer.

      catalinaOpts: "-DapplicableNodeTypes=WebUser,BackgroundProcessing,Search,FaxProcessing,Stream,BIX"

      nodeType: "BIX"

      nodeSelector:

        application: pega_stg

      tolerations:

      - key: "App"

        operator: "Equal"

        value: "pega-nonweb-stg"

        effect: "NoSchedule"

      custom:

        volumes:

          - name: angpeganfsstg

            persistentVolumeClaim:

              claimName: sc-pvc-anf-pegaang-stg-01 

          - name: secrets-store-inline

            csi:

              driver: secrets-store.csi.k8s.io

              readOnly: true

              volumeAttributes:

                secretProviderClass: "pega-secrets-stage"

        volumeMounts:

          - name: secrets-store-inline

            mountPath: /mnt/secrets-store

            readOnly: true

          - name: angpeganfsstg

            mountPath: /angpeganfsstg/logs/ang-pega-stg

        env: *tierenv

      replicas: 1

      javaOpts: "-Duser.timezone=America/Los_Angeles -Dpega.logdir=/angpeganfsstg/logs/ang-pega-stg"

 

      pegaDiagnosticUser: ""

      pegaDiagnosticPassword: ""

      

      # deploymentStrategy:

        # rollingUpdate:

          # maxSurge: 1

          # maxUnavailable: 0

        # type: RollingUpdate

        

      livenessProbe:

        port: 8080

        initialDelaySeconds: 600

        timeoutSeconds: 120

        periodSeconds: 120

      

      readinessProbe:

        initialDelaySeconds: 600

        timeoutSeconds: 120

        periodSeconds: 120

      

      startupProbe:

        initialDelaySeconds: 200

        periodSeconds: 120

        timeoutSeconds: 120

        periodSeconds: 120

        failureThreshold: 6

        

      # To configure an alternative user for your custom image, set value for runAsUser

      # To configure an alternative group for volume mounts, set value for fsGroup

      # See, https://github.com/pegasystems/pega-helm-charts/blob/master/charts/pega/README.md#security-context

 

      # Optionally overridde default resource specifications

      cpuRequest: 2

      memRequest: "6Gi"

      cpuLimit: 2

      memLimit: "10Gi"

      initialHeap: "4000m"

      maxHeap: "8000m"

 

      # hpa:

      #   enabled: false

      hpa:

        enabled: true

        enableCpuTarget: true

        enableMemoryTarget: false

        maxReplicas: 10

        minReplicas: 3

        targetAverageCPUValue: 2.55

 

      # Set enabled to true to include a Pod Disruption Budget for this tier.

      # To enable this budget, specifiy either a pdb.minAvailable or pdb.maxUnavailable

      # value and comment out the other parameter.

      pdb:

        enabled: false

        minAvailable: 1

        # maxUnavailable: "50%"

        

# External services

 

# Cassandra automatic deployment settings.

cassandra:

  enabled: false

  persistence:

    enabled: false

  resources:

    requests:

      memory: "4Gi"

      cpu: 2

    limits:

      memory: "8Gi"

      cpu: 4

 

# Elasticsearch deployment settings.

# Note: This Elasticsearch deployment is used for Pega search, and is not the same Elasticsearch deployment used by the EFK stack.

# These search nodes will be deployed regardless of the Elasticsearch configuration above.

# Refer to README document to configure `Search and Reporting Service` as a search functionality provider under this section.

pegasearch:

  # image: "acrstg02.azurecr.io/pega/search:8.23.0"

  # nodeSelector:

  #   application: pega_stg

  # tolerations:

  # - key: "App"

  #   operator: "Equal"

  #   value: "pega-nonweb-stg"

  #   effect: "NoSchedule"

  # cpuRequest: 2

  # memRequest: "6Gi"

  # cpuLimit: 2

  # memLimit: "6Gi"

  # volumeSize: "5Gi"

  # replicas: 1

  # externalSearchService: false    

  externalSearchService: true

  #externalURL: "http://pega-srs.ns-um-pega-stage.svc.cluster.local"

  externalURL: "http://pega-srs.ns-um-pega-srs-stage.svc.cluster.local"

  

 

  # ports:

  # - containerPort: 9200

    # name: http

  # - containerPort: 9300

    # name: transport

  # volumeMounts:

  # - name: esstorage

    # mountpath: /usr/share/elasticsearch/data

 

# Pega Installer settings.

installer:

  image: "YOUR_INSTALLER_IMAGE:TAG"

  # Set the initial administrator@pega.com password for your installation.  This will need to be changed at first login.

  # The adminPassword value cannot start with "@".

  adminPassword: "ADMIN_PASSWORD"

  # Upgrade specific properties

  upgrade:

    # Type of upgrade

    # Valid upgradeType values are 'in-place' , 'zero-downtime' , 'custom' , 'out-of-place-rules' , 'out-of-place-data' .

    upgradeType: "in-place"

    # Specify a name for a target rules schema that the upgrade process creates for patches and upgrades.

    targetRulesSchema: ""

    # Specify a name for a target data schema that the upgrade process creates for patches and upgrades.

    # For postgres databases that you are upgrading from Pega Infinity version 8.4.0 and later

    # And for Oracle databases that you are upgrading from Pega Infinity version 8.4.3 and later.

    targetDataSchema: ""

    # Specify the server URL and the required server username and password to access a Pega REST server used to perform pre- and post-update actions during zero-downtime updates.

    pegaRESTServerURL: ""

    pegaRESTUsername: ""

    pegaRESTPassword: ""

 

# Hazelcast settings (applicable from Pega 8.6)

hazelcast:

  # Hazelcast docker image for platform version 8.6 through 8.7.x

  clusteringServiceImage: "acrstg02.azurecr.io/pega/pega/clustering-service:1.3.14"

  nodeSelector:

      application: pega_stg

  

  tolerations:

  - key: "App"

    operator: "Equal"

    value: "pega-web-stg"

    effect: "NoSchedule"

  # Setting below to true will deploy Pega Platform using a client-server Hazelcast model for version 8.6 through 8.7.x.

  # Note: Make sure to set this value as "false" in case of Pega Platform version before "8.6". If not set this will fail the installation.

  clusteringServiceEnabled: true

  enabled: false

 

#  volumeMounts:

#  - name: logs

#    mountPath: "/opt/hazelcast/logs"

 

#  ports:

#  - containerPort: 5701

#    name: hazelcast

#  - containerPort: 8089

#    name: tcp-prometheus

 

  # Setting related to Hazelcast migration.

  migration:

    # Set to `true` to initiate the migration job.

    initiateMigration: false

    # Reference the `platform/clustering-service-kubectl` Docker image to create the migration job.

    migrationJobImage: "YOUR_MIGRATION_JOB_IMAGE:TAG"

    # Set to `true` when migrating from embedded Hazelcast.

    embeddedToCSMigration: false

    # Set to `true` to prevent Pega pod restart while decommissioning older version of externalized Hazelcast pods.

    skipRestart: false

 

  # No. of initial members to join

  replicas: 4

  # UserName to be used in client-server Hazelcast model for authentication

  username: 

  # Password to be used in client-server Hazelcast model for authentication

  password: 

  # To avoid exposing username,password parameters, configure the

  # username,password parameters in External Secrets Manager, and enter the external secret for the credentials

  # make sure the keys in the secret should be HZ_CS_AUTH_USERNAME , HZ_CS_AUTH_PASSWORD

  external_secret_name: "ang-pega-cred-secrets-stage"

 

  # Memory and CPU settings for HZ service

  resources:

    requests:

      memory: "4Gi"

      cpu: 2

    limits:

      memory: "8Gi"

      cpu: 4

 

# Stream (externalized Kafka service) settings.

stream:

  # Disabled by default, when enabled, your deployment no longer uses the "Stream" node type.

  enabled: true

  # Provide externalized Kafka service broker urls.

  bootstrapServer: "lkc-xqojpq-l7okw.southcentralus.azure.glb.confluent.cloud:9092"

  # Provide Security Protocol used to communicate with kafka brokers. Supported values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.

  securityProtocol: SASL_SSL

  # If required, provide trustStore certificate file name

  # When using a trustStore certificate, you must also include a Kubernetes secret name, that contains the trustStore certificate,

  # in the global.certificatesSecrets parameter.

  # Pega deployments only support trustStores using the Java Key Store (.jks) format.

  trustStore: ""

  # If required provide trustStorePassword value in plain text.

  trustStorePassword: ""

  # If required, provide keyStore certificate file name

  # When using a keyStore certificate, you must also include a Kubernetes secret name, that contains the keyStore certificate,

  # in the global.certificatesSecrets parameter.

  # Pega deployments only support keyStores using the Java Key Store (.jks) format.

  keyStore: ""

  # If required, provide keyStore value in plain text.

  keyStorePassword: ""

  # If required, provide jaasConfig value in plain text.

  jaasConfig: 

  # If required, provide a SASL mechanism**. Supported values are: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512.

  saslMechanism: PLAIN

  # By default, topics originating from Pega Platform have the pega- prefix,

  # so that it is easy to distinguish them from topics created by other applications.

  # Pega supports customizing the name pattern for your Externalized Kafka configuration for each deployment.

  streamNamePattern: "pega-stage-ang-aks-{stream.name}"

  # Your replicationFactor value cannot be more than the number of Kafka brokers and 3.

  replicationFactor: "3"

  # To avoid exposing trustStorePassword, keyStorePassword, and jaasConfig parameters, leave the values empty and

  # configure them using an External Secrets Manager, making sure you configure the keys in the secret in the order:

  # STREAM_TRUSTSTORE_PASSWORD, STREAM_KEYSTORE_PASSWORD and STREAM_JAAS_CONFIG.

  # Enter the external secret name below.

  external_secret_name: "ang-pega-cred-secrets-stage"

 

 